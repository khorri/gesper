apply plugin: "java"
apply plugin: "eclipse"

eclipse {
	classpath {

		// default output directory
		defaultOutputDir = file("bin/main")

		// seperate output for main & test sources
		file.whenMerged { cp ->
			// seperate output for main & test sources
			cp.entries.findAll { it.kind == "src" && it.path == "build/src-gen" }*.output = "bin/main"
			cp.entries.findAll { it.kind == "src" && it.path.startsWith("src/main/") }*.output = "bin/main"
			cp.entries.findAll { it.kind == "src" && it.path.startsWith("src/test/") }*.output = "bin/test"

			// remove self-dependency
			cp.entries.removeAll { it.path.contains("$project.name") && it.kind == 'src' }
			cp.entries.removeAll { it.path.contains("$project.name/build") && it.kind == 'lib' }
		}
	}
}

if (["axelor-development-kit", "axelor-shell", "axelor-test", "axelor-gradle"].contains(project.name)) {
	return;
}

apply plugin: "eclipse-wtp"

def appendAttributes = { node ->
	node.appendNode('attributes')
		.appendNode('attribute', [name: 'org.eclipse.jst.component.dependency', value: plugins.hasPlugin("war") ? '/WEB-INF/lib' : '../']);
}

// fix exported class path warnings
eclipse.classpath.file {
	whenMerged { cp ->
		cp.entries.findAll { it instanceof org.gradle.plugins.ide.eclipse.model.ProjectDependency }.each {
			if (it.hasProperty("exported") && !it.path.endsWith("axelor-test")) {
				it.exported = true
			}
		}
	}
	withXml {
		def node = it.asNode()
		node.classpathentry.findAll { it.'**'.attribute.find { it.@name == "org.eclipse.jst.component.dependency" } }*.@exported = true
		node.classpathentry.findAll { it.@kind == "src" && it.@exported && !it.@path.endsWith("axelor-test") }.each appendAttributes
	}
}

def linkCoreProjects = { project ->

	def linked = ["axelor-common", "axelor-test", "axelor-core", "axelor-web"]
	def wtpLinked = linked - ['axelor-test']

	project.eclipse.classpath {
		minusConfigurations += [project.configurations.axelorCore]
	}

	project.eclipse.classpath.file {
		withXml {
			def node = it.asNode()
			def added = []
			def ref = node.find { it.@path == "org.eclipse.jst.j2ee.internal.web.container" }
			if (ref) {
				ref.plus {
					linked.collect { name ->
						def me = classpathentry(kind: 'src', path: "/${name}", exported: true)
						if (name == "axelor-test") {
							me.@exported = false
						} else {
							added += [me]
						}
						return me
					}
				}
			} else {
				linked.each { name ->
					def me = node.appendNode('classpathentry', [kind: 'src', path: "/${name}", exported: true])
					if (name == "axelor-test") {
						me.attributes().remove("exported")
					} else {
						added += [me]
					}
				}
			}
			// append dependency attribute
			added.each appendAttributes
		}
	}

	project.eclipse.wtp.component {
		minusConfigurations += [project.configurations.axelorCore]
	}

	project.eclipse.wtp.component.file {
		withXml {
			def node = it.asNode()['wb-module'][0]
			def refs = node.findAll { it.name() == 'wb-resource' }
			def extra = {
				['wb-resource'('deploy-path': "/", 'source-path': "src/main/webapp"),
				 'wb-resource'('deploy-path': "/", 'source-path': "axelor-webapp"),
				 'wb-resource'('deploy-path': "/", 'source-path': "build/webapp")] +
				wtpLinked.collect { name ->
					'dependent-module'('deploy-path': "/WEB-INF/lib", handle: "module:/resource/${name}/${name}") {
						'dependency-type'('uses')
					}
				}
			}
			def ref = refs.find { it.'@source-path' == "src/main/webapp" };
			if (ref) {
				ref.replaceNode extra
			} else {
				refs.last()?.plus extra
			}
		}
	}
	project.eclipse.project {
		linkedResource name: 'axelor-webapp', type: '2', location: '${WORKSPACE_LOC}/axelor-development-kit/axelor-web/src/main/webapp'
	}
}

ext.adkLinks = {
	afterEvaluate {
		if (project.plugins.hasPlugin("axelor-app") ||
			project.plugins.hasPlugin("axelor-module")) {
			// link core projects
			linkCoreProjects(project)
		}
	}
}
